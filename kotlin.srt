00:00
well hello internet and welcome to my
00:02
Kotlin video tutorial in this one
00:03
tutorial I'm going to cover pretty much
00:05
what you would find in a standard 250
00:07
300 page book on cotton 1 which means
00:09
the core syntax of the entire language
00:10
and like always in the description
00:12
underneath the video is a link to all of
00:15
the code from this video as well as
00:17
timestamps to all the individual parts
00:19
of the video so you can watch whatever
00:20
you want or watch part of the video and
00:22
come back to it or do whatever and also
00:24
I'm going to show you how to install
00:25
everything you're going to need to
00:26
complete this video and I have a lot to
00:28
do so let's get into it alright I'm
00:30
guessing you already have the Java
00:32
development kit installed if you do not
00:35
then you're going to have to go just
00:37
type in Java development kit don't worry
00:38
about this and you're going to come to a
00:40
page it looks like this and you're going
00:42
to find whatever operating system you
00:44
are using Linux Mac OS windows whatever
00:47
click on that and install that stuff and
00:50
I'm going to go pretty quickly here then
00:52
you're going to need to go to JetBrains
00:54
comm IDE 8 and download and more
00:58
specifically whether you're on Windows
01:00
or Mac OS we're going to be using the
01:01
free community version so you're going
01:03
to click on download and if you're on
01:05
Mac OS you're going to see this little
01:06
guy pop up down here dmg click on open
01:09
and then you're going to the folder that
01:11
opens you're going to grab the IntelliJ
01:14
application and drop it in your
01:16
Applications folder and then whenever
01:18
you do that this guy's going to open up
01:20
you're going to decide if you want a
01:21
white interface or a dark interface
01:23
click on keymaps and click on I've never
01:26
used IDE a and click on launch or script
01:29
checkmark inside of here and click on
01:31
default plugins and all this is fine
01:33
just click on featured plugins all
01:35
that's fine click on start using
01:37
IntelliJ then to create your very first
01:39
cutland project whenever this guy opens
01:41
up click on create new project come over
01:43
here on the left side of the screen
01:44
click on Kotlin and click on Kotlin JVM
01:48
and click on next this guy is going to
01:50
pop up here give your project a name I
01:52
called mine Kotlin tuts
01:54
it's this is automatically going to open
01:55
up like this you're going to click on
01:57
project SDK and you're going to click on
01:59
this guy and go and find whatever JVM
02:02
you want to use come down here click on
02:04
finish whatever you do this is going to
02:06
open up you're going to come over to
02:07
your source directory right click on it
02:10
click on new and then Kotlin file class
02:13
this guy's going to pop up inside of
02:14
here give it a name I called nine Kotlin
02:16
tub again call it whatever you want
02:17
click on OK and then you're going to
02:20
type the simple hello world script
02:22
inside here just to verify everything
02:24
works type exactly what you see there
02:26
and you can click on pause we want to
02:28
check that out and whenever you do hello
02:30
world is going to print down here you're
02:31
probably more than likely going to see
02:32
this it's a bug
02:34
don't worry about it it's your
02:36
applications are going to compile
02:37
perfectly fine it's just a known bug
02:39
that will go away finally or eventually
02:41
and that's how you install both IntelliJ
02:44
and Kotlin on a Mac o west computer and
02:48
now I'll show you how to set it up on
02:49
Windows basically the same thing alright
02:51
so you go to JetBrains comm ide a
02:54
download you're going to come over here
02:56
click on Windows then I'm going to click
02:58
on download then this guy is going to
03:00
pop up down here you're going to click
03:01
on save this is going to pop up and
03:04
you're going to click on next and this
03:06
is perfectly fine click on next and
03:08
leave everything the way it is click on
03:10
next and it is going to install
03:12
everything for you after it's all done
03:14
installing you're going to see this guy
03:16
leave this run IntelliJ Community
03:19
Edition checked and click on finish and
03:21
what we're going to do here is do not
03:23
import settings and click on OK and then
03:25
you're going to check if you want a
03:27
white or a black interface click on
03:29
default plugins leave everything the
03:31
same featured plug-in start using
03:32
IntelliJ click on that guy come in here
03:35
create a new project you're going to
03:37
come in and click on Kotlin Kotlin JVM
03:39
come down here click on next come back
03:41
up inside of here you're going to click
03:43
on give your project a name you're going
03:45
to click inside of here to select the
03:48
SDK you want to use and you can see
03:50
right there I use version 1.8 and then
03:52
I'm going to click on finish this is
03:54
going to open up you're going to come
03:55
over to source right click on it to
03:57
click on new and Kotlin file class
03:59
you're going to type in exactly what I
04:01
typed in for I'll show you that here in
04:03
a second oh by the way if you want to
04:04
run and your code you're going to click
04:06
on run and run and that's kind of run it
04:09
for you and whenever you click on run in
04:11
Windows it's going to come up like this
04:13
so you're going to click on demo Kotlin
04:14
Tots or whatever you call doors click on
04:16
that by the way here is the simple hello
04:19
world application I'm going to use to
04:20
verify that everything is installed
04:22
properly and after you run it you're
04:24
going to see down here that hole
04:25
world prints out all right so now you
04:27
have Kotlin and IntelliJ and all that
04:29
stuff installed now let's start writing
04:31
some code all right so this should all
04:33
look familiar because that's exactly
04:35
what you have here oh by the way
04:36
everybody always asked me how did I get
04:38
this from the bottom to the right you're
04:39
going to right-click on it like that and
04:41
you're going to click on move to your
04:42
go-to top left bottom or right okay so
04:45
that's how I did that
04:46
all right so let's write some code first
04:48
thing I want to talk about are variables
04:49
by the way this is where all your
04:51
application is your main function this
04:53
is where everything is going to execute
04:55
and then right here you can see is how
04:58
you print out to screen very first I'm
05:00
going to talk about our variables now
05:02
there are different types of variables
05:04
there are mutable and immutable and
05:06
immutable sometimes referred to as
05:09
read-only variables and you create an
05:12
immutable or an unchangeable variable by
05:17
typing in Val and then let's say name is
05:19
equal to Derek okay there you go
05:22
you just created yourself a read only
05:24
variable you can also create mutable
05:26
variables inside of Kotlin by changing
05:29
Val into variable and I'll say something
05:31
like my age is equal to 42 okay my name
05:35
hopefully is never going to change and
05:37
my age more than likely will so that is
05:40
the difference between those two guys
05:41
now Kotlin uses what is called type
05:44
inference so whenever I put a string
05:46
inside of here Kotlin knows that this is
05:48
a string and it refers to it as a string
05:50
likewise here it's going to refer to my
05:52
age as an integer and those squiggly
05:55
lines are there because I'm you can see
05:57
right here variable my age is never used
05:59
all right IntelliJ is a very verbose
06:02
with warnings so what I want to do here
06:04
is even though it will figure out what
06:07
the type is on its own you can also come
06:09
in and define your type so let's say I
06:11
want to come in here and I want to
06:13
create a mutable or changeable variable
06:15
I'm going to call this big int and I
06:18
want this to be an integer well you may
06:21
ask yourself well how big of an integer
06:23
can I store inside of there
06:24
well I can go and call max value and it
06:27
will tell me exactly that and we're
06:30
going to find out what that is and then
06:32
we can go and tell this small intz like
06:35
that and I will just change this to
06:38
in value and I'll be able to get that
06:40
value as well I can then come in and go
06:43
print line and I'll say something like
06:46
biggest int and we can go and put the
06:51
information in here and multiple
06:53
different ways one thing we can do is
06:54
just put a plus sign inside of there and
06:56
then put big int like that or we could
07:00
also come in and we could say small list
07:03
means small list int and this is
07:07
obviously going to be big in but I'm
07:08
gonna get rid of that all together and
07:09
I'm gonna put that guy right there and
07:11
you can use what it's called string
07:13
interpolation which is going to allow me
07:15
to put small int inside of there and how
07:17
I do that is I come in and I put a
07:21
dollar sign followed by whatever the
07:24
name is for my variable and you can see
07:27
it gives you all sorts of different
07:29
information here all right so we got
07:30
that all set up and if I want to run it
07:32
come in and run it and it's going to
07:35
print all of that out and here you can
07:37
see the biggest integer I can have is
07:39
that big number and the smallest integer
07:40
is that number and there's two different
07:42
ways to place that information or print
07:45
that information out on my screen don't
07:47
worry about all of the warnings they're
07:49
just telling me I'm not using this in
07:51
that all right let's get rid of that so
07:52
that warnings go away now there are of
07:54
course many other different variable
07:56
types
07:57
you're going to have integers which are
07:59
referred to using int you are also going
08:03
to have Long's and here in a second I
08:05
will show you how big or how small along
08:08
can be you're going to have doubles
08:09
you're also going to have floats you're
08:12
also going to have volumes boolean and
08:16
as per numbers you can have shorts which
08:19
are going to be 16 bytes or you can have
08:22
bytes which are going to be 8 bytes and
08:24
let's go in here and oh well so you'll
08:27
have characters I'm going to show you
08:28
examples of all these different guys
08:29
though all right all right so I went in
08:32
here I already showed you I typed in the
08:33
how to find out the biggest int and the
08:36
smallest int I then went in and created
08:38
the largest long and the smallest long
08:41
the largest doubles and so forth and so
08:43
on and floats and all that fun stuff
08:45
we're going to run it and you're going
08:47
to say over here on the right side of
08:48
the screen all of that look how big
08:49
Long's are these are
08:51
all right and there is the biggest
08:53
double and the smallest and all of those
08:56
different things now one thing that is
08:58
important to be aware of however is
09:01
there is a loss of precision whenever
09:05
you are working with floating-point
09:06
numbers and let me go and give you an
09:08
example of what I mean by that let's go
09:10
and create a variable and double num1
09:15
and this is going to be a double is
09:18
equal to and I'm going to go 1 and what
09:21
you're going to do here is you're going
09:22
to with your doubles you're going to
09:23
have a precision up to 15 digits so even
09:26
though they can be gigantic they're
09:27
really not so what you want to be aware
09:29
of is I'm going to go okay so there is
09:31
15 digits let's add 16 on there and then
09:34
we're going to come in here and we're
09:36
going to copy that paste that inside of
09:38
there change this to double num2 and
09:40
then I'm going to print out the
09:42
difference or the sum let's do a sum and
09:44
then you'll be able to see how it fails
09:46
up fails whenever I'm working with it so
09:49
you can also come in here go plus sign
09:50
like this and you could go and perform
09:52
your arithmetic directly inside of here
09:54
double Nam 1 and double num2 like that
09:58
no you probably have noticed there are
10:00
no semicolons inside of Kotlin let's run
10:03
that and you're going to see that
10:04
everything added up perfectly fine a
10:06
whole bunch of ones until it got right
10:07
here to the sixteenth digit and it
10:09
messed up so just want to make you aware
10:10
that precision falls apart after 15
10:14
digits of course you should always
10:16
verify that on your own computer though
10:18
now to take a look at bouillon bouillon
10:21
can either have a value of true or false
10:25
that is it let's go into a real simple
10:27
example so I'm going to say if true and
10:31
what you can do here is you can use the
10:34
phrase or keyword is to see if a
10:38
variable is a integer or a double or a
10:41
float or a boolean and that's what I'm
10:44
doing right here so I'm saying is true a
10:47
boolean yes I can do that and then I can
10:50
command you can also come in here and
10:51
put print like this and go true is
10:54
boolean and then what this is going to
10:57
do is print out the screen but not add a
10:59
new line but you can go in here and put
11:01
a new line in there for yourself and do
11:03
that and it's going to come back as true
11:05
true is bullying all right good stuff
11:07
and let's do one more example here with
11:10
variables before I get into casting a
11:12
couple other a lot of other things let's
11:15
go and create a character how we do that
11:16
is let's say something like letter grade
11:19
and we go character like this is equal
11:23
to a character is going to be surrounded
11:25
with single digits and there you go
11:27
there is a character and I could come in
11:30
here just to verify that this indeed is
11:32
a character by saying a is a and
11:36
character whoops
11:37
spell character right there we are and
11:40
we can come in and go a plus and
11:43
actually you do something else I can go
11:45
and put form this without using that
11:47
plus sign I can go a dollar sign and put
11:49
two curly brackets in there and then I
11:51
can go letter grade is a character and
11:55
that is all legit and we can run it and
11:58
you can see that indeed it's going to
12:00
come back a as a character and true is
12:02
indeed true so that is how another way
12:05
we can use string interpolation and I
12:07
want to show you briefly how casting
12:09
works now if you want to cast from one
12:11
value in another let's go and just get
12:13
rid of that all together right there you
12:15
can it's quite easy so let's paste this
12:17
in here and let's just change what this
12:19
is so let's say we wanted to go 3.14 two
12:23
and integer so we can cast from a double
12:27
to an integer well I could then come in
12:29
and go 3.14 if you want to cast a double
12:32
or a float to an integer
12:34
you just put a dot and two int followed
12:37
by parentheses and it is automatically
12:40
going to do this where it looks forgot
12:41
to put the plus sign all right so
12:43
there's that that's how we can convert
12:44
from a double to an integer and let's go
12:48
and convert from a letter grade just to
12:51
so something weird it works with any of
12:52
them so just go in there and play around
12:54
on your own and you'll see so let's
12:56
convert an A into an integer see how
13:00
that works out
13:01
so I'm going to go letter grade that
13:04
I've deleted the letter grade yeah so
13:06
let's just get rid of it and we'll just
13:08
go I can put put it directly inside here
13:11
surrounded with single quotes and then
13:14
go to ends Kotlin doesn't care
13:16
all that's cool and then we command and
13:19
I'm going to do it the next one oh well
13:23
we can get that value right there we'll
13:25
say 65 to character and see what that
13:29
works out to be so we'll put 65 inside
13:32
out of there and we'll say to character
13:34
like that and we can run all those guys
13:37
and you can see that all of those work
13:40
and that's how casting works inside of
13:43
caught one and now I'm going to jump
13:45
over and show you a whole bunch of
13:47
different things we can do with strings
13:48
alright
13:50
so strings are just double quoted series
13:52
of characters and of course we put Val
13:54
inside of there what does that mean that
13:56
means that's a value that is not going
13:58
to change and we can go and put my name
14:02
inside of there I can remember how to
14:04
spell it there we are so there we are we
14:06
just created a string and let's go and
14:09
create a long string so we'll go long
14:11
string you can also come in here and put
14:14
double quotes again we're going to put
14:16
three of them and this is going to allow
14:19
me to let's put something different
14:21
inside out this is a come down here and
14:25
then I can go long string and then it
14:28
won't edit that at all it allows me to
14:30
do multi-line strings or whatever you'd
14:32
like let's go and create a couple more
14:34
here first name is equal to and I could
14:37
also come in here like this and go
14:39
string and define if I didn't want it to
14:41
go in there and infer what I'm doing
14:44
either way it works out so it'll go Doug
14:46
and let's just copy this guy right there
14:50
and come down here and let's go L name
14:53
and this will be Doug Smith of course
14:56
we're going to be able to come in here
14:57
and join these together actually you can
15:00
also change the value remember bow you
15:02
don't change var are you can let's
15:04
change it so I can just come in and go F
15:07
name is equal to Sally
15:10
alright so we were able to change that
15:12
value and let's say we wanted to go in
15:14
and join these strings together of
15:16
course we could do that we can just go F
15:18
name plus angle a so like that's and L
15:23
name and there we go that's how we go
15:27
and join our values together whoops
15:29
change
15:29
- an uppercase there we are alright so
15:31
that's how we can join strings like I
15:33
said before we're going to be able to
15:35
use string interpolation or just putting
15:38
a variable value directly inside of a
15:40
string that we plan on printing out so
15:42
we can go name like that and we can go
15:45
full name like that and that's going to
15:48
print that guy out it's going to do a
15:50
whole bunch more of these guys you're
15:52
going to like I said before you're going
15:54
to be able to print out I never know
15:57
when you guys are using time stamps and
15:58
jump around and doing whatever so I'm
16:00
going to cover this again it also to
16:02
come in here like this with a dollar
16:04
sign and curly brackets and perform
16:06
arithmetic operations directly inside of
16:09
your string you want to print out and
16:10
that all works good you're going to be
16:12
able to get your string length let's go
16:15
and just copy this guy right here paste
16:17
that inside of there and I will have all
16:20
this stuff whoops
16:21
keep this like this so I'm gonna go
16:23
string length and then if I want to get
16:27
to that said string length I know let's
16:29
do it for the long string I could do so
16:31
like this and then follow it up with the
16:34
word length what else can we do I can
16:37
compare strings so I could create two
16:40
brand-new strings here if I would like
16:42
or I could just compared ugh and Wow
16:45
let's do something a little different
16:46
there we go so I have two strings if I'm
16:48
never moving too quick just hit the
16:50
pause button I like to make videos in
16:51
which we use the pause button alright so
16:53
the only difference between string one
16:54
and string two is an uppercase a so
16:57
let's compare these to see how they work
16:59
out so pitch that in there and we're
17:04
going to change this up a little bit
17:05
let's say we want to go strings equal
17:08
and see if those strings are equal or
17:11
not how we can do a comparison between
17:14
these two guys is we can go string 1 +
17:18
equals and throw string 2 inside of
17:23
there and that's one way to set that off
17:25
also going to be able to compare another
17:28
one let's go and do a different thing
17:29
here and this is going to be a
17:31
comparison that is going to instead of
17:33
giving us true or false it's actually
17:35
going to give us a 0 in the situation
17:38
which the string is equal if it is
17:40
negative it's going to be a value that's
17:42
less
17:43
than zero if it's a positive it's going
17:45
to be greater than zero
17:46
so what we can do here is let's do a
17:49
slight compare let's go to compare a to
17:52
B and we can come in and like this and
17:56
we can just come in throw the a inside
17:59
of there like that and we'll use
18:01
compared to here instead of equals so
18:05
compared to and we'll throw B inside
18:07
here just to see how that works out for
18:09
us you can see we can put our double
18:11
quotes inside of here without having to
18:14
back slash them or anything and
18:15
everything works out perfectly fine and
18:17
let's run that just to see what all of
18:18
that stuff is and you can see right here
18:20
comparison A to B is negative one right
18:23
here you can see even though the only
18:25
difference is capital a that comes back
18:26
as false string length and you can see
18:29
how I added all that stuff together and
18:30
all of that other stuff so pretty neat
18:33
stuff let's go in and do a couple more
18:35
of these just get rid of that let's say
18:38
I would like to get a character at a
18:40
specific index I could do that as well
18:44
so let's say I want to get the seconds
18:47
index and I want to do that for string
18:51
one just leave string 1 be right there
18:53
and let's just change this to get and
18:56
then we'll come in here and we'll change
18:58
that to two that's going to get whatever
19:00
value is assigned to the second index
19:02
and this is giving me a little squiggle
19:04
saying that I don't have to do it this
19:06
way I could also come in here and do it
19:08
this way and you could do it either way
19:10
you wanted to do it it's completely up
19:11
to you I can also come in and get a
19:13
substring by providing where I want to
19:16
start and ending where I want to end up
19:19
to so it's come here I'll show you an
19:22
example so we'll come in here and let's
19:24
say I want to go and get index 2 through
19:27
7 how would I do that well let's do this
19:30
with string 1 once again let's go get
19:33
rid of all this and let me go sub
19:35
sequence and if I want to get from index
19:39
2 to 7 what I have to do is put 2 to 8
19:43
okay it goes up to index 8 but it
19:45
doesn't include it with the results and
19:47
then let's as a final little foot way of
19:49
working with strings let's say I want to
19:51
check to see if a string contains
19:53
another string and of course I can do
19:55
that
19:55
annals
19:56
say I want to check to see if it has the
19:58
value of random somewhere inside of it
20:00
so I can say something like contains
20:02
random and to check that I can get
20:05
string 1 and contains and then inside of
20:10
this guy I can put in whatever I want to
20:12
search for so random yeah that's right
20:14
and you can see over here on the right
20:16
side index 1 through 7 gets me random so
20:20
we go 0 1 2 say and that's how it gets
20:24
random contains random comes back is
20:25
true what is the second index is our why
20:28
is that well that's because it's a zero
20:30
index this is one index and whoops and
20:32
that's the second index so now it isn't
20:33
but now it is alright so good alright so
20:36
there's a rough overview of course there
20:37
are other functions available with
20:39
manipulating with strings inside of
20:41
Kotlin but those are the main guys and
20:43
now I want to talk about arrays okay so
20:45
Rays are going to be able to store
20:47
multiple values of multiple different
20:49
types and how we create one is go VAR
20:52
and we can go let's call this my array
20:55
is equal to and how we create an array
20:58
as you go array of let's say I want to
21:01
go one and one point two three and Doug
21:06
okay so you can see we can put multiple
21:08
different data types inside of here
21:10
you're going to be able to access these
21:13
guys just like you did anything else by
21:16
going my array like this and let's say
21:19
you want to get whatever is in the
21:20
second index that's how you do that you
21:22
can also change the value in a very
21:24
simple way let's say I want to change
21:26
whatever is in the first index just do
21:28
it like that and go equal to 3.14
21:31
whatever you want you can find out
21:33
easily how many elements are in your
21:36
array let's command
21:38
and let's go something like array length
21:42
and to get whatever that is you just go
21:45
my array and this time we're going to
21:48
use size and that'll give us a array
21:51
size and we can check if an element is
21:54
inside of an array so let's say we want
21:57
to verify that Doug is in right the
22:02
array that we have we can do that just
22:04
go my array and then we're going to go
22:08
contains and we're specifically looking
22:11
for Doug and that's going to come back
22:14
to or false if that's in there we're
22:17
also going to be able to get a number of
22:19
elements in an array and have it
22:21
returned as an array so we're going to
22:23
go bar like this I'm going to say call
22:26
this part array because it's part of
22:28
that array and I can go my array and
22:32
follow that up with copy of range and if
22:37
I want to get the first two elements
22:38
inside of the array then I'm pulling
22:40
information from I go 0 & 1 and of
22:43
course you increment that if you want
22:44
more of it we can then get the first
22:46
elements out of our array easily by just
22:50
let's just change this first and we can
22:55
then go string like that and then type
22:57
in first oops
22:58
first so that's going to give us our
23:01
first element and we can you could also
23:03
type in last if you want to get the last
23:05
element or whatever you'd like you could
23:07
also get the index of a value so let's
23:10
say I wanted to find out what is the
23:13
first index for Doug where that shows up
23:17
string 1 once again and here I'm going
23:19
to go index of and I'm gonna type in dog
23:23
and there's Doug and let's run that just
23:25
see what all this stuff does whoops I
23:27
messed that up whenever I try to do that
23:29
whoops let's change it back
23:30
oh all right now it looks okay so let's
23:34
say that and let's run it again oops I
23:36
typed in string 1 instead of my array
23:39
gonna fix that real quick my array and
23:41
my row run it and there you can see Doug
23:46
comes back where is that coming from
23:47
that's coming from right here where we
23:49
said we wanted whatever is in the second
23:51
index
23:51
array length you can see comes back as
23:53
three you can see the very first value
23:57
stored in the array is one and you can
23:59
see Doug index starts at the second
24:02
index inside of our rack alright so a
24:04
whole bunch of different things there
24:06
another thing that's really cool and I'm
24:08
going to show you how to do all kinds of
24:10
things with what are called collections
24:12
and array sort of be in one of these
24:13
collections let's say I'd like to create
24:16
an array of squares how hard would that
24:18
be well I can go more let's call this
24:21
square array is equal to I can call
24:25
array and five which is the total number
24:30
of indexes I want inside of there and
24:32
then what I want to do is I want to go
24:34
through one through five and have the
24:37
values multiplied times each other
24:38
sounds hard
24:39
not really I'm just going to type in X
24:41
and x times X so for each of the index
24:47
value is what it's going to do is it's
24:49
going to multiply whatever the index is
24:52
times itself you can see here in a
24:54
second exactly what that looks like now
24:55
let's just go and print that print line
24:57
like this and we go square array and -
25:03
alright so and we'll run that and you
25:05
see it comes back is for y well because
25:08
that second index is multiplied times
25:10
itself so it's the second one comes in
25:12
here two times two is equal to four so
25:14
that just created an array full of
25:16
squares so you could throw anything in
25:17
there you want I just used five but of
25:19
course you can do anything and one thing
25:21
I forgot to mention is of course there
25:22
are type specific arrays which means if
25:25
you want to have an array that can only
25:27
have one data type of course you can so
25:29
you just go like this and array like
25:32
this and integer and then if somebody
25:34
tries to store something inside of this
25:37
array that is not an integer it's going
25:39
to throw an error there so you go array
25:41
of and one two and three and of course
25:44
that is going to work out the way that
25:46
you would like it to alright so I'm
25:48
going to do more with arrays as the two
25:50
door continues but now I want to take a
25:52
pause here and take a look at ranges all
25:55
right so ranges are really cool what
25:58
they're basically and allow you to do is
26:00
to define basically a starting and an
26:03
ending value and do
26:04
all sorts of nifty little calculations
26:06
in between so let's say I want to create
26:08
a range that goes from one to ten how
26:12
would I do it I just do that and then I
26:14
go 1 dot dot 10 there it is
26:16
automatically generated it for me
26:18
likewise I can come in here and have it
26:20
work with letters so let's just call
26:22
this alpha is equal to and I'm going to
26:25
go double quotes here a dot dot and then
26:27
I want to throw a Z inside of there so
26:29
there we go we just created lists
26:31
automatically generating those for us
26:33
you're also going to be able to use in
26:36
to search a range so let's come in and
26:40
let's say that we want to search to find
26:42
out if r is inside of alpha we can do so
26:46
so we'll say something like R in alpha
26:49
and then we come in here get rid of all
26:52
this stuff and then we will go our in
26:54
whoops make sure you have that there in
26:56
an alpha and it will tell us if it's if
27:00
the R is stored inside of that range or
27:02
not we're also going to be able to
27:04
create ranges that would decrement
27:06
downwards so let's say we wanted to go
27:08
from 10 to 1 we could do so we go 10 to
27:13
1 and then we could go 10 and down to
27:19
and then whatever we want the last thing
27:21
to be we could create an array up to a
27:24
value so let's just go to to say we want
27:29
to go 20 is equal to and then we can go
27:32
to dot and in this situation we would
27:35
say range to 20 and what else can we do
27:39
we could step through an array so let's
27:41
say each value inside of our range I
27:45
means we can step through a range so say
27:48
we wanted to step through adding 3 each
27:50
time starting at the first value we
27:52
could do so let's go bow and let's call
27:55
this range 3 is equal to and then we can
27:59
go 1 to 10 and let's say we want to step
28:03
through adding 3 each time we can go
28:06
step and 3 not 2 of course and what else
28:10
can we do we can of course cycle through
28:12
a range and print information out we can
28:14
do the same thing
28:16
with arrays as you're going to see later
28:18
on or you can go back and test this out
28:19
so I can go for X N and we go range
28:23
three or we could do this with any of
28:25
the other ones and we go print a line
28:27
and what I'm going to do here is just so
28:31
we can tell what this is I'm going to go
28:32
range three and then we can go X and
28:36
that's going to print out all those
28:38
different values and of course the final
28:40
thing is we would be able to reverse a
28:42
range let's use the for loop again so
28:45
I'm going to go for X in and we'll go
28:48
ten to one and reverse and put that
28:53
there like that and then we'll just
28:56
print the information out again so we'll
28:58
go print line and reverse and X and that
29:04
is going to allow us to do all that we
29:06
will run it and you're going to see did
29:08
it work
29:09
what I have little bug 23 does it to do
29:11
oh this is reversed sorry about that I
29:15
remembered it wrong and let's run it
29:17
again and you can see everything here so
29:19
what we were able to do here with what
29:21
it says is are in alpha remember we use
29:24
the keyword in to check if the letter R
29:27
is in this range and indeed it comes
29:29
back it's true you can see we came down
29:31
here and we went and added three to each
29:34
of these values and then printed them
29:35
out on the screen using this flow for
29:37
loop here you can see 1 plus 3 is equal
29:39
to 4 plus 3 is equal to 7 and so forth
29:42
and so on and then we also came here and
29:44
use 10 to 1 and we re reversed it and
29:47
that's reason why we have 1 through 10
29:49
all right so a whole bunch of cool
29:51
things we can do with ranges more is
29:53
coming as this tutorial continues and
29:54
now I want to talk about conditionals
29:56
all right so of course there's going to
29:59
be a bunch of different conditional
30:00
operators I'm going to show you here and
30:02
you're going to have greater than you're
30:03
going to have less than you're going to
30:05
have greater than or equal to you're
30:07
going to have less than or equal to
30:08
you're going to have equal to and you're
30:10
going to have not equal to you're also
30:11
going to have logical operators and like
30:14
I said I'm going to show you all these
30:15
you're going to and you're going to have
30:17
or and you're going to have not all
30:19
right so I'll show you a couple examples
30:20
how they work using if and else if and
30:22
else so let's say we go and create a
30:25
value here remember this is in immutable
30:28
it's not going to change
30:29
so we're going to vow age in this
30:31
situation age will not change so I'm
30:33
gonna say if age is less than five in
30:37
that situation what we're going to do is
30:39
print line and we'll say something like
30:42
go to preschool maybe a little bit early
30:46
to send a infants preschool but it's
30:49
going to work in our world and then
30:50
you're going to be able to go else if
30:52
there's no LF for any of that crazy
30:54
stuff inside of Kotlin we can say age is
30:57
equal to five and in that situation
31:00
we're going to say that you can go to
31:02
kindergarten and there's kindergarten
31:04
and else is and now we can stack these
31:08
using logical operators so we could go
31:10
and say something like let's put two
31:12
parentheses in there if age is greater
31:15
than five and meaning that both sides of
31:18
this conditional operator has to be true
31:20
for this to come back with the value of
31:22
true and if a is less than or equal to
31:25
seventeen in that situation I'm going to
31:28
say that we're going to calculate the
31:30
grade that the student is going to be
31:32
working or going to and we'll do that by
31:34
taking age minus five and remember no
31:38
semicolons and then I will come in and
31:40
go print line and I'll say go to and
31:42
change this to grade and then use string
31:46
interpolation to throw grade inside of
31:49
there and then finally we can say else
31:51
which is going to be the default and in
31:53
that situation we'll say everybody else
31:56
can go to college and there you are
31:58
that's how if and else if and
32:00
conditional operators and logical
32:01
operators work why don't we see how work
32:04
if we're using what is called win which
32:07
works like switch in other languages win
32:10
is very cool here I'll run it for you
32:11
just you can see what the results are
32:13
ran it go to Grade three okay so you can
32:15
see it fell into this quadrant right
32:17
here subtracted five from the age and
32:19
that's the reason why so it's grade
32:20
three now let's take a look at the win
32:23
loo earth conditional operator and we'll
32:26
go win age I'm going to show you a bunch
32:29
of different things we can do here so we
32:30
go win age and then we'll say let's say
32:32
we wanted to match a list I know you
32:35
normally wouldn't do this but I'm going
32:36
to do it just show you this because
32:38
sometimes will work you can just go zero
32:41
and two and three and four and then come
32:45
out here put the little arrow in there
32:46
and go print line and say go to
32:49
preschool let's keep that the same
32:51
you're also going to be able to match a
32:54
specific value so we just go five like
32:57
that of course that's going to work for
32:58
you and air will say go to kindergarten
33:01
kindergarten and there that is we can
33:05
also match a range and we use in with
33:08
this so we'll say 6.17 and put an arrow
33:13
inside of there and here just put our
33:17
curly brackets and we can do all sorts
33:19
of other things so we can say grade is
33:21
equal to age minus five and then we can
33:26
print out that
33:28
so we'll say go to grade and we will
33:31
throw in whatever the grade is so
33:34
there's grade and then likewise you can
33:36
have a default value and that is else
33:39
also else and then we'll print this out
33:42
and say go to college all right so
33:45
that's if else if and else as well as
33:48
how to use when to do pretty much
33:50
exactly the same thing in numerous
33:52
different they this is really cool I
33:53
love win and you can see it gets exactly
33:55
the same results alright so there is a
33:57
rundown of some conditional operators
34:00
and conditional things we can do and now
34:02
I want to talk about looping alright so
34:04
basically of course you know looping is
34:06
going to allow us to cycle through
34:07
arrays and ranges or collections and all
34:11
sorts of other different things and
34:12
basically anything that implements an
34:14
iterator function so I already talked
34:17
about for loops a little bit let's do
34:18
another one so I'm going to go for X in
34:21
and here we're going to use a range I'm
34:23
going to go one dot dot ten and it's
34:25
going to cycle through one through ten
34:27
as you're probably guessing let's print
34:29
that out and we'll say something like
34:31
Lube Lube
34:33
I don't know stickler for uppercase
34:35
letters and then I'll just go X all
34:38
right so there is how we can come in and
34:40
work with or basically cycle through a
34:44
range now I want to do something a
34:45
little bit neater and this is what I'm
34:47
going to do is I'm going to use a while
34:49
loop and it's going to guess random
34:51
numbers but you may be asking how do we
34:53
calculate a Rand
34:54
number well the neat thing about Kotlin
34:57
is basically if there is a library
34:59
inside of Java you're going to be able
35:01
to use it inside of Kotlin so we go
35:03
imports Java dot util dot random so
35:08
there's a library we use to import or to
35:11
calculate random values with Java and
35:14
automatically we're going to be able to
35:15
use it with Kotlin so pretty cool
35:16
someone come down here now and generate
35:19
a random value how you do that you go
35:20
Val and we call this R and is equal to
35:23
random and then go Val and I'm gonna
35:28
call this magic number is equal to R and
35:32
and next I'm going to work with integers
35:36
so I want to find a random value from 50
35:39
to 1 or from 1 to 50 I guess it's a
35:42
better way of saying that let's change
35:43
this to magic number lowercase and now
35:46
let's use our while loop course with
35:48
while loop like in almost every other
35:50
language you're going to have a value
35:52
you're going to increment or work with
35:54
that you're going to have outside or
35:56
define before the while loop so I'm
35:57
going to save our guess is equal to zero
36:00
and just have it figure out whatever the
36:02
datatype for that is and then I'm going
36:04
to go and generate my while loop so I'm
36:06
going to go while magic num is not equal
36:10
to the guess in that situation I'm going
36:14
to come in and go guess and there's a
36:17
shortcut way of adding one to a value
36:20
and I'm going to keep incrementing the
36:21
value of guess until it gets to the
36:23
point where it finds what it wants and
36:25
then in that situation I can then say
36:28
magic number was and we'll just sort
36:32
guests inside there all right let's run
36:34
these guys and you can see how that
36:36
works out and there it is it looped
36:37
through printed one through ten and
36:39
magic number in this situation was 19
36:42
let's run it again and now it's 15 run
36:44
it again now it's 34 and you can see
36:46
that the random number generator is
36:47
working and also the Bible it's working
36:49
another thing let's go and do another
36:52
while loop but so that I can talk about
36:53
continue and break now let's do this as
36:56
a for loop so let's go for and we'll say
36:59
X in and I'm going to go 1 2 20 and
37:04
then what I'm going to do is I'm going
37:05
to say if X modulus 2 is equal to 0
37:10
modulus is going to give us the
37:12
remainder of a division and what this is
37:15
used for is to check if a value is even
37:18
or odd so if it comes back X modulus 2
37:21
is equal to 0 that means it's an even
37:23
number in that situation what I want to
37:25
do is continue back to the top of the
37:28
loop and basically skip over all of the
37:31
even values so I'm going to go continue
37:33
like that then after we get out of that
37:36
continue basically just skips everything
37:38
else that comes afterwards and jumps
37:40
back up here and this guy up here this
37:42
for loop is going to increment for us
37:44
otherwise I want to come in and go print
37:47
line and I'm going to print out an odd
37:49
value so I'm going to put it like that
37:51
and I'm gonna go X is going to be what I
37:54
print out and let's say that I want to
37:57
jump out prematurely and if the value is
38:00
ever equal to 15 how I can do that is I
38:03
can say if X is equal to 15 in that
38:07
situation I want to break out of it and
38:09
that is how that's going to work if I
38:11
run that you're going to see that that
38:13
indeed works so it only printed out the
38:15
odd values and whenever it got the 15 it
38:17
jumped out of the loop even though this
38:19
was supposed to continue going and it
38:21
ended and that's how continue in break
38:23
work inside of caught ones keep doing
38:25
some more let's go and create ourselves
38:27
an array here and SLAR let's call this
38:33
array 3 and let's define this as an
38:37
integer array is equal to array o + 3 +
38:43
6 + 9 and what we're going to do here is
38:48
iterate for the indices of our array how
38:52
we can do that is go 4 and I n ray 3 and
38:57
indices and what it's going to do is
39:00
return the indices for each of the
39:02
individual parts of the array and then
39:04
we'll be able to go in here and print
39:06
line like that and let's say I want to
39:09
get multiples of 3 which is why stored
39:12
inside of there
39:13
this and Ray 3
39:16
and throw an eye in there so that's a
39:18
way to get all that out of there and
39:20
then the final thing is I want to output
39:23
not only the index but also the value
39:27
for each of the values inside of the
39:28
Ring I can go for and then put double
39:32
parentheses inside of there and I'm
39:34
going to say index and value is what I
39:37
want to work with I'm going to say in
39:39
array 3 with index parentheses once
39:44
again since that is indeed a function
39:47
and then I'm going to print this out and
39:49
would go bats and index and I'm going to
39:54
get to the index and that's coming from
39:56
this guy right there you're going to see
39:58
more examples of how where like they
40:00
would pull information this way and I
40:02
want the value also
40:04
alright so save that didn't have any
40:06
bugs that's going to print out real nice
40:07
on the screen and indeed you can see
40:09
here I went and printed out those values
40:12
inside of our array by referring to
40:14
their index and here I printed out the
40:17
index as well as the values alright so
40:19
there is a whole bunch of different
40:20
things about a looping and I want to
40:23
talk about functions ok so whenever
40:25
you're defining a function it's going to
40:28
start out with the word fun and then
40:31
it's going to have whatever the function
40:33
name is a list of parameters as well as
40:36
their data type as well as a return type
40:39
so I'm going to do an example so let's
40:40
say we create a function called add then
40:44
inside of parentheses I'm going to say
40:45
that it is going to receive a parameter
40:47
I want to refer to as number one I'm
40:49
going to say that this is an integer and
40:52
I'm going to have a number two let's say
40:54
that's also an integer then after that
40:56
I'm going to put a colon and say its
40:58
return type is an integer and there's a
41:01
bunch of different things we can do here
41:02
and here we're going to use go equal 2
41:05
num1 plus num2 there's the whole entire
41:08
function all in one place and of course
41:11
we're going to be able to call for it to
41:13
work so let's go 5 plus 4 is equal to
41:17
and we can say add and pass in a 5 and a
41:22
4 alright so there it is that is how we
41:24
can do that let's run it just to see
41:26
what it looks like and you can say 5
41:28
plus 4 is equal to 9
41:30
okay now one thing that is interesting
41:31
is that you actually do not need a
41:34
return type whenever you are working
41:36
with single line functions this is a
41:38
single line function what we have right
41:40
here so let's go and I'll show you
41:42
exactly what I mean by that Linc's copy
41:44
this and just change it to subtract just
41:46
so I can show you an example so throw
41:48
that inside of there change this to
41:50
subtract it's once again going to
41:53
receive a number and another number and
41:56
another thing well since I'm here I
41:58
might as well talk about it you can also
41:59
have default values so let's say we
42:01
wanted to have a default we could do
42:02
that just like this and let's have the
42:05
defaults be equal to 1 in that situation
42:08
you're going to be able to get rid of
42:09
this in here in that situation and it's
42:12
still going to work out perfectly fine
42:14
and let's go get this guy and paste it
42:17
in there just so you can see that I'm
42:18
not lying to you sometimes say 5 minus 4
42:21
is equal to would be an interesting
42:23
tutorial I basically just make up a
42:25
bunch of things and people think it's
42:27
true but that is not going on right now
42:28
I just want to make sure you're clear on
42:30
that
42:30
ok so 5 minus 4 is equal to 9 what
42:33
subtract oh I went and slept out there
42:36
all right so it'll change that right
42:38
there and 5 minus 4 is equal to 1 ok so
42:41
there is how to set default values and
42:43
also point out the fact that this is a
42:45
single line function you don't need a
42:47
return value but put it in there you
42:49
might as well alright another thing
42:51
you're also going to be able to use what
42:53
are called named parameters and what I
42:56
mean by that is you're going to be able
42:57
to refer to these even though they're
42:59
out of order so I'm going to come in I'm
43:02
just gonna paste this inside of here
43:03
like that and here I'm going to say 4
43:06
minus 5 is equal to and I'm going to
43:11
call subtract so so tracks and then
43:14
we'll go in and name the parameter so
43:17
I'm going to say I want to put num2
43:18
inside of here first give it a value of
43:21
5 and then i'm going to have num1 and of
43:24
course i'm going to give it a value of 4
43:26
that is perfectly fine you can do that
43:29
as well you may ask yourself well what
43:31
do i put inside of here if i don't have
43:33
a return value well you're going to put
43:34
unit not void so let's go and create a
43:37
function that doesn't return anything
43:40
let's
43:41
call it say hello and it is going to
43:43
receive a name which is going to be a
43:46
string datatype and it is going to
43:49
return nothing so we put a colon in
43:51
there and just put in units and then we
43:53
can go and put equal to print line and
43:56
then inside of here go hello and
43:59
whatever the name was that was passed
44:01
inside of there and we can call this guy
44:04
actually we don't need that right there
44:06
we can just go say hello and pass in
44:09
call I don't know
44:11
there we go so there's that and what
44:14
else can we do with functions there's a
44:16
whole bunch we can create a function
44:18
that is going to return two values and
44:21
there's a couple different ways of doing
44:23
that
44:24
let's go Val and well let's create a
44:28
function outside of here we'll come down
44:30
inside of here and this is going to
44:32
return two values so we're going to go
44:34
fun next two and this is going to
44:37
receive a number and then it is going to
44:40
return the next two in line so whoops to
44:44
do so we're going to put a colon inside
44:47
of here and go pair and it's going to
44:50
return an integer and then it's going to
44:52
return another integer and to do that we
44:56
can go return and pair and I'm going to
45:00
go numb whoops plus 1 and then num plus
45:04
look to okay so that's what that
45:07
function does for us let's go and call
45:09
it up inside of here and how you do that
45:11
is you go eval and the two things one
45:14
I'm going to have a variable called two
45:16
and another one called
45:17
three is equal to and I'm going to call
45:20
the next two function inside of here
45:23
well make sure you spell it right next
45:24
to we're going to pass one value inside
45:27
of there and then we can come in and
45:28
print this out just so that we know that
45:31
it indeed works so I'm going to say one
45:33
and then I'm going to go to and I'm
45:36
going to go three because we want nuts
45:39
and we're going to see what a whole
45:41
bunch of these different guys do for us
45:43
so four minus five where is that guy
45:45
from all that's from this guy right here
45:47
and then we have hello Paul that comes
45:49
out there and then here we were able to
45:51
get two values passed back
45:54
from one function so a whole bunch of
45:56
neat things but there are more and more
45:58
are coming
45:59
you're also going to be able to send a
46:01
variable number of parameters we're
46:03
going to create a function outside of
46:04
here again so when we go function and we
46:07
call this get some and if I'm going to
46:09
receive a variable number of values I'm
46:11
going to type in var arg like that and
46:14
then give it whatever name i want i'm
46:16
going to call it numbs in this situation
46:18
and then I'm going to say integer and
46:20
I'm going to say that this is going to
46:22
return an integer and then I'm going to
46:25
go var sum is equal to zero and I'm
46:29
going to cycle through all of these
46:30
values as if they are an array which
46:32
they are array so to do that I can use a
46:35
function called for each and that's a
46:39
way to cycle through arrays so I'm going
46:42
to go n and I can do for each of these
46:45
values I can go sum plus whoops equal to
46:48
n and that's going to cycle through
46:50
every value in the array that's passed
46:52
inside of there and add those to the
46:54
value of sum and then afterwards it is
46:57
going to return whatever the final value
46:59
of sum is and we come in here and call
47:01
this guy to execute let's just do a
47:04
print line here just to keep it simple
47:05
and I can go sum and then let's go and
47:09
call get some so I'm going to go get
47:11
some and 1 2 3 4 and a 5 and there it is
47:17
and as there it is and you can see the
47:19
sum comes back is 15 we're also going to
47:22
be able to come in and define function
47:24
literals so let's say we want to have
47:27
multiplied like this is equal to and
47:31
we'll have num1 inside of there and
47:35
that's going to be an integer and num2
47:39
and that's also going to be an integer
47:42
and then this guy is going to return
47:45
whatever num1 is times num2 so we just
47:49
go in here put that there and then 1
47:51
times num2 and there that guy is and
47:55
we'll be able to come in and print this
47:58
so let's just do 5 times 3 and then call
48:02
the function itself multiplied and 5
48:07
and three and that'll work and we could
48:10
also something else cool is we could
48:12
calculate a factorial with tail
48:15
recursion I'm just going to show you an
48:17
example of this I'm not going to get
48:19
into recursion and how that works you
48:20
probably understand it if you don't
48:22
understand recursion just leave a
48:23
comment below and I'll give you an
48:24
example all right so I just wanted to
48:26
cover this just to cover it so outside
48:28
of here actually I'm going to let's get
48:30
rid of this guy right there because we
48:32
already covered that and get some let's
48:35
just get rid of it all right so what I'm
48:38
going to do is when we go fun and I'm
48:41
going to calculate a factorial using
48:42
tail recursion so factorial X : oops
48:47
integer and I'm guessing you guys have
48:50
seen me cover recursion a million times
48:52
so it's just not going to talk about it
48:54
right now like I said if you guys let me
48:56
leave it for comment in the pen I'll
48:58
give you an example
48:59
so I'm going to go tail recursion fun
49:01
fact call this fact tail and it's going
49:05
to Y which is going to be an integer and
49:08
Z which is going to be another integer
49:12
and it's going to return an integer and
49:15
this is just a function that calls
49:17
itself until it ends and anytime you
49:19
have a situation in which you're doing
49:21
that you have to have an exit scenario
49:23
so we're going to have our exit scenario
49:25
be whenever Y is equal to zero in that
49:28
situation we're going to turn return Z
49:30
otherwise we are going to continue
49:33
having our function call itself so we'll
49:35
say return and we'll call factorial tail
49:40
and we'll go to y -1 and Y times 2 or Y
49:47
times Z and I guess I guess I should
49:50
talk about what exactly a factorial is a
49:53
factorial is just five let's say you
49:55
have factorial 5 you would go 5 times 4
49:57
times 3 times 2 times 1
50:00
ok that's the factorial so that's what
50:02
I'm doing here just decrementing that
50:04
and then after this after it finishes
50:07
all this stuff we will go and return
50:09
factorial tail and x + 1 so to save that
50:16
then we can jump up inside of here and
50:18
show you what that looks like whenever
50:19
we exit
50:20
- tits so we'll go print line and we
50:23
will do factorial 5 just because that's
50:26
their so that's the factorial symbol and
50:29
we will go fact and inside here throw in
50:32
the value of 5 so we'll save it and run
50:36
it and you'll see that the factorial of
50:38
5 is equal to 120 all right so neat
50:41
stuff and more and more and more stuff
50:43
with functions is coming now I want to
50:44
talk about higher order functions okay
50:47
so a higher order function is just going
50:50
to be a function it either accepts or
50:51
returns another function so let's just
50:54
go and create a whole bunch of examples
50:56
here make that all make sense so what I
50:58
want to do here is I want to use a
51:01
filter which is going to be a collection
51:04
operator to find even values in a range
51:06
and I'm going to do a whole bunch of the
51:09
different collection operators because I
51:10
really need so I'm going to go numb list
51:12
and define a range from 1 to 20 and I
51:17
want to use filter on this to just find
51:19
my evens so what I'm going to do is go
51:22
bow and even list is equal to and we'll
51:28
go numb list and follow that up with a
51:32
filter and I can put IT inside here
51:36
basically how the way this works is that
51:38
if a function has only one parameter you
51:40
don't have to declare it but you just
51:43
use I T instead and it'll just work so
51:46
here this is going to represent each of
51:48
these individual values in the range I'm
51:50
going to go i t2 is equal to 0 and cycle
51:55
that guy off and then I can go even list
51:59
and then for each and then define that I
52:03
want to print out all of those values so
52:06
we can go n and print them so print line
52:10
and n so that's going to cycle through
52:13
and print all of those different guys
52:14
all those even values and we can run it
52:17
and see that anyway worked
52:19
all right so neat stuff alright so now I
52:21
would do something a little bit more
52:22
complex I want to call a function that
52:25
is going to return dynamically a created
52:29
function so outside of here I'm going to
52:32
call this guy
52:34
basically what this is going to return
52:35
to do is return a custom function that's
52:37
going to multiply values times the value
52:39
that's passed in so I'm going to go
52:41
function and I'm going to call this make
52:44
math function it's going to receive a
52:48
num and it's going to be an integer and
52:51
then it is going to return a function
52:55
that is going to multiply values times
52:57
then I'm 1 so what I do is I define that
53:00
this guy this function that is going to
53:03
be returned is going to receive an
53:05
integer and then what it's going to do
53:07
is return an integer and then I define
53:11
exactly what I want it to do so I'm
53:13
going to go num2 is like this and then
53:16
we're going to go norm 1 times num2
53:20
all right so it is a function that
53:22
generates functions pretty cool all
53:25
right so let's go and run it so I'm
53:27
going to go Val and let's say I want to
53:30
create a function that multiplies values
53:32
times 3 well I just call my make math
53:35
function and inside of this guy passed
53:40
the value of 3 and that's going to get
53:42
that inside of there and it's going to
53:43
create this custom function for me so of
53:46
course I have to make this B equals to
53:48
come down side here and then we can test
53:51
it to show that it indeed works fine so
53:54
I'm gonna go 5 times 3 is whoops times 3
54:00
is going to be equal to and I can have
54:04
this be multiplied 3 times 5 and run it
54:07
and you're going to say that 15 comes
54:09
back alright so that's a function that
54:11
creates functions now we're going to
54:14
create a nother one and what this is
54:16
going to do is it's going to receive a
54:18
list and a function to use on the list
54:21
so I'm going to go fun I'm going to call
54:24
this math on list num list and it's
54:30
going to receive an array and more
54:33
specifically an integer array and it's
54:36
also going to receive a function so this
54:39
is going to pass a function inside of a
54:42
function num and this is going to be an
54:45
integer
54:46
and we're defining what it does and this
54:49
function is going to return an integer
54:51
and then what I can do is go for Nam in
54:55
Nam lists for each of those values
54:59
passed inside of there I am going to
55:01
print out some information and for this
55:04
one I am going to say math on list just
55:09
so you can see what's going on there and
55:10
then I can refer to any function that is
55:13
passed inside of there as my funk and
55:16
numb on each of those items come back up
55:20
inside of here and call it so I'm going
55:22
to go value multiplied to is equal to
55:27
and I can go numb one integer and then I
55:33
can go numb one times two so there is
55:39
our function let's call this number one
55:41
there we are and then I'm going to go
55:43
Val num list 2 is equal to array of
55:49
let's go create and write four and five
55:53
and then I'm going to pass in both the
55:56
array as well as the function I want to
55:59
operate on there so a math on list and
56:03
we go numb list 2 and then multiply 2
56:08
and we can run it and up that I do I
56:14
didn't type in math on list that's okay
56:17
math on list that we are and run it and
56:20
it gave me another error
56:22
15 what's that air does it either that I
56:25
didn't make that uppercase I fixed it
56:28
now didn't I yes I did let's run it
56:30
again and you could see that it went and
56:32
multiplied two times each of those
56:34
values in the array all right so pretty
56:37
cool stuff in regards to higher-order
56:38
functions now I want to show you some
56:40
collection operators all right so these
56:43
collection operators are going to work
56:46
on any type of collection so rays and
56:49
you're going to see I'm going to cover
56:50
lists and maps and there's a couple
56:52
other different collections but either
56:54
way so let's say we wanted to sum all
56:57
the values in a list we go Val
57:00
and list sum is going to be equal to
57:03
number list 2 which is what I have right
57:07
there and I can call reduce to do just
57:11
that
57:12
and what I need to do with reduce is go
57:14
x and y and say that I want to sum those
57:18
values together you can form all sorts
57:21
of other different operations the fold
57:23
is kind of like reduce but it starts
57:26
with a initial value so I can come in
57:29
and grab this guy like that and I can do
57:34
hmm well let's also come in and print
57:37
this out so what did I do
57:40
let's go front line and reduce some and
57:46
then print out that list so we're going
57:49
to go list some and I'm going to do the
57:53
same thing with this guy so you can see
57:55
the difference between reduce as well as
57:58
fold so with fold what you're going to
58:01
do change us to list some to change this
58:04
to fold and fold is going to start off
58:08
with an initial value of 5 and then it
58:11
is going to continue adding all the
58:12
other values in the list to it so let's
58:14
change that to that and let's change
58:17
this to fold some so fold some and you
58:20
can run it and you can see that it is
58:22
indeed summing all of those values and
58:24
difference between it is to 10 and to 15
58:26
see see that reducing fold are very very
58:28
similar to each other we can come in and
58:30
check if any values are able to meet a
58:33
condition so let's say we wanted to do
58:35
something like evens and we wanted to
58:37
check if any of these values is even
58:41
well they can go numb list 2 followed by
58:45
an e and then have your condition to be
58:48
inside of there and we're going to be
58:49
able to use I T once again and 2 is
58:53
equal to 0 and you're going to be able
58:55
to get your answer from that guy let's
58:58
do a couple more of these you're like
59:00
wise well there's another one that is
59:03
all so in that situation the only
59:06
difference is is all of them are going
59:09
to have to be even to come back as true
59:12
in that situation you could also come in
59:15
here and return a list of values that
59:17
again meet a certain condition so let's
59:19
say we say Val big 3 is equal to num
59:24
list 2 and use filter for that and here
59:30
I'm just going to find my condition cell
59:32
greater than 3 and those are going to be
59:35
the ones that end up going inside of
59:37
that and let's go and print those out we
59:39
can go big 3.4 each and then let's go
59:44
and print all of them out put and print
59:48
line and here I'll just put greater than
59:50
3 you'll know what that means and print
59:53
all those values out let's run it see
59:55
what it looks like and there you can see
59:56
all those values come out and true and
59:58
false show up right there and for our
60:00
final example I want to show you map and
60:03
basically map is going to allow you to
60:05
perform an action on every single item
60:07
and then return a new list so here we go
60:11
Wow times 7 so I'm going to multiply
60:14
everything times 7 and we're going to do
60:16
that on our number list to call map and
60:20
then define exactly what I want to occur
60:23
in that situation so I'm going to take
60:24
each of those items and multiply them
60:26
times 2 and save them to a brand new
60:28
list and then we can say times 7 dot for
60:31
each and then print them all out so cool
60:35
stuff so print line and then we can go
60:38
like this and times 7 and print that is
60:43
all out thinking about that all right
60:45
yes it did and we can run it and when we
60:49
do you're going to see every item print
60:50
it out or multiply type 7 prints out
60:52
there we go there's a whole bunch of
60:54
different collection operators that are
60:56
available to you and now I want to talk
60:57
about exception handling and you all
61:00
know what exception handling is used for
61:01
it's handled or it allows us to handle
61:03
errors so that the programs do not crash
61:05
so I'm going to use the same type of
61:08
example I always use I'm going to have a
61:10
division by 0 so I'm going to have my
61:13
divisor be equal to 2 in this situation
61:16
and I'm going to do a division which
61:18
means there's a potential for division
61:20
by 0 to occur inside of here I'm going
61:22
to say
61:23
and the visor is equal to zero in that
61:29
situation I want to throw an exception
61:32
so I'm going to say a throw illegal
61:35
argument exception that is it and in
61:39
this situation we say can't divide by 0
61:44
else if there was no problem with that
61:48
literally doing here there's a little
61:51
problem here we get rid of that empanada
61:52
and throw it out there all right
61:55
now everything's ok else if that wasn't
61:58
a good one we can come in and we can say
62:01
get rid of that and we can say something
62:04
like 5 divided by and let's put our
62:07
divisor inside of there is equal to and
62:11
we will do our division inside here so 5
62:15
divided by divisor okay so everything's
62:18
fine now anytime we have a try block we
62:21
are going to try to catch our error and
62:24
in this situation when you go E oops
62:27
e and we are going to follow that up
62:31
with illegal argument exception of
62:36
course we're going to catch the exact
62:38
exception that we sent and then we are
62:41
going to or if you'd like to come in
62:43
here and print out the message that is
62:46
tied to that exception you can go e dot
62:49
message exactly like that and it will
62:52
print that out and we can run it and
62:54
since divisors - we have no problem but
62:57
if we come up here and change the
62:58
divisor to 0 and you're going to say
63:00
that it just goes and prints can't
63:02
divide by 0
63:03
all right so very very very brief
63:05
explanation of how exception handling
63:08
works inside of Kotlin but i think you
63:10
can catch on with the rest of it and now
63:12
i want to talk about some collections
63:14
and i'm going to start off with lists
63:16
now basically there are immutable lists
63:19
and there are mutable water refer to as
63:22
mutable lists alright so what I'm going
63:24
to do here at first is I want to create
63:26
a mutable list and then I'm going to
63:28
create an immutable list so we'll go var
63:31
call this list 1 and
63:34
this is immutable or a changeable list
63:37
mutate change get it alright so we're
63:40
going to go int and then I can go to
63:43
populate it I call mutable list of and 1
63:48
2 3 4 & 5 and there you go I just
63:51
created a mutable list if instead you
63:54
would like to create an immutable or a
63:57
list that does not change we're going to
63:59
come in here change this to Val instead
64:01
of our and we're going to change this to
64:04
list 2 and then this is going to just be
64:07
changed to a list so it's an integer
64:09
list and then we just come in here and
64:11
change this to a list of and let's just
64:14
copy or cut off that little part okay so
64:17
here is a mutable or changeable list
64:19
here is any immutable or unchangeable
64:21
list and that's how we create those now
64:23
I'm mainly going to be working with the
64:24
mutable list here let's say I want to
64:26
add an item to a mutable list I go list
64:29
1 and add and we can throw anything
64:32
inside of there that's how we add values
64:34
let's say I want to get our first item
64:37
don't want to do that let's go print
64:39
line and I want to get our first item
64:44
out of it I can do so and let's get this
64:48
and list 1 followed by first there that
64:53
is that's how to get that that's the
64:55
first item in the list let's say I want
64:57
to get the last item in the list well
65:00
guess what we type in last and like this
65:03
type in last like that and we can do a
65:06
whole bunch other things let's say we
65:07
want to get a value at a specific index
65:10
1 let's say we want it to be the second
65:13
index seconds and to do that we just go
65:17
to list 1 once again and let's just say
65:20
that change that to 2 how that operates
65:23
we can get a list starting from one
65:25
index to another so we're going to
65:28
create list 3 is equal to list 1 and we
65:34
call sub list and go from 0 to 3 and
65:38
that's going to create that that's how
65:40
to get a sub list we're also going to be
65:42
able to get the size of our
65:46
test call this length and we need to
65:48
call this list 1 and follow that up with
65:51
sighs yawns of course we're going to be
65:55
able to clear our list so let's go list
65:58
3 followed by clear it's going to get
66:01
rid of everything inside of the list we
66:03
can remove a value so we'll go to list
66:06
one followed by remove and let's say we
66:10
want to get rid of one we could also
66:12
remove at a specific index by saying
66:16
remove at and changing that to one and
66:21
we could add a value add an index so
66:24
it's Co hist one and let's say we want
66:26
it to be in the position of two and what
66:28
we want to add is 10 and of course we
66:31
can command and cycle through all of
66:34
these items inside of here by calling
66:37
for each and then after that let's get
66:40
rid of this sort her after that we can
66:43
go in and what we want done to each of
66:47
those items and here I'm going to say
66:48
print line and I'll go mutable list and
66:53
print out each of those items everything
66:57
looks ok I think so don't whoops I went
67:00
and hit enter right whenever I did that
67:01
all right on to that save it and run it
67:04
that the oops what we do to the there is
67:09
an error warning 13 what's going on with
67:12
13 I'll list who's never used that
67:15
that's not our main error let's get rid
67:17
of that so just for the heck of it look
67:19
over here and what do we have we have an
67:21
error on line 32 always ignore this and
67:24
this this is your specific application
67:26
your errors in 32 let's look at 32 oh I
67:31
see what I did I went there's um
67:33
actually no index 2 in this situation
67:36
let's just get rid of that all together
67:38
and we can save us and we can run it and
67:41
you can see right there it is going in
67:44
here grab the first value grab the last
67:46
or output of the last value the second
67:48
value was 3 the length was 6 then we
67:50
went and removed a whole bunch of
67:51
different things and you can see that it
67:52
printed out 4 and 6 for all of those
67:56
different items in
67:57
list okay so there's a whole bunch of
67:59
functions and ways to work with lists
68:01
and now I want to talk about maps
68:03
okay so a map is going to be a
68:05
modifiable collection that's going to
68:07
hold key valued pairs and let's go and
68:10
create an empty map so I'm going to go
68:12
map is equal to and of course there's
68:15
going to be immutable maps and immutable
68:20
maps or matted work with here is a
68:22
mutable map and how you load one is go
68:25
mutable map of and here I'm going to
68:28
define that the key is going to be an
68:31
integer and the value in this situation
68:34
is going to be anything and look like
68:37
this and there we go
68:39
so now we created our map now it's time
68:41
for us to use our map let's go
68:43
well I'm also going to show you how to
68:44
create a map in which you load values
68:46
whenever you first start it this is call
68:48
this map 2 is equal to mutable map and
68:51
mutable map of more specifically and
68:54
then in this guy what I'm going to do is
68:57
I'm going to say get rid of this and
69:00
have it figure it out I'm going to say
69:01
one two Doug and then I'm going to put
69:05
another element which is going to be two
69:07
to 25 okay so this is going to be the
69:10
key and this is going to be the value
69:12
that we are going to be working with
69:13
they can also add additional values
69:15
let's go map 1 and this is going to be 2
69:18
the guys doesn't have anything so I'm
69:20
going to throw Derek inside of there and
69:22
we go map and to again this is the key
69:26
and the value
69:27
I'll throw 42 inside of there I'm going
69:29
to be able to get the size of these
69:32
elements by just going let's call this
69:35
map size and then I will just have in
69:38
map size and map and size and there that
69:42
is we can also add a key value so we can
69:47
go map and put and say 3 and let's say
69:52
we want to put in Pittsburgh that is we
69:56
can also come in and remove a key and
69:59
value so we go map and we will use
70:02
remove and I'm going to remove whatever
70:05
is in the second key or whatever is
70:08
assigned to it and of course we're going
70:09
to be able to iterate
70:11
and get key values so I'll say four and
70:15
I'm going to say X and y and in math
70:20
pounds the X is going to be the key
70:22
otherwise is going to be the value and
70:24
we can go print line and just show that
70:27
I can say key and there's X and value
70:32
and so let's make the uppercase value
70:36
and Y alright and run it and you're
70:41
going to see that a map size 2 comes out
70:43
with this guy right here and here I
70:45
cycle through the different values and
70:47
printed them out the keys and values
70:48
okay so brief explanation of how maps
70:51
work in Kotlin now i want to talk about
70:53
classes all right so we're going to
70:55
create a class outside of the main
70:58
function right here and i can get rid of
71:00
this random function or there's random
71:02
and poor it up here because i'm not
71:03
going to use it anymore so we can come
71:05
down here like this and it's important
71:08
to understand up front of that there are
71:10
no static methods and that classes are
71:12
going to be marked as final like in java
71:15
by default unless they are marked as
71:17
open so i'm going to mark it as open
71:20
whoops go open there we go so open and
71:24
i'm going to create an animal class and
71:27
you're going to put the attributes you
71:29
want this guy to be set up with directly
71:32
thereafter
71:34
you're going to put the datatype you're
71:36
also let's say i want to have every
71:38
animal is going to have a name and a
71:40
height let's put that there and maybe it
71:44
makes more sense to put these on
71:45
multiple different lines and also you
71:48
can see I'm using Val here because this
71:50
is not going to change and bar here
71:51
because the height as well as the weight
71:54
could change so put that inside of there
71:58
and there is double okay and now let's
72:00
continue adding on to all the different
72:03
things I wish this wasn't quite so
72:05
verbose with all the squigglies
72:06
everywhere the drives me nuts
72:08
but he's okay basically your objects are
72:10
going to be initialized in an init
72:13
function and this is just going to be
72:15
where you're going to verify if a value
72:18
is okay or not so let's say let's also
72:21
talk about regular expressions here
72:24
very briefly like three lines of regular
72:25
expressions basically what I want to do
72:27
is I want to create a red X here that is
72:30
going to match for a number any place
72:32
inside of a string so let's say I want
72:34
to make it invalid to have a number
72:36
inside of an animal's name well how I
72:39
can define this regular expression is
72:43
like this and rig X and put this like
72:46
this and then what this is saying is
72:49
basically I'm checking to see if there
72:51
is a decimal value anywhere inside of
72:55
the string that's going to be assigned
72:57
to name and what I'm going to do is put
73:01
require inside here and basically what's
73:05
going to happen is if these requirements
73:07
aren't going to be met an illegal
73:10
argument exception is going to be thrown
73:12
so I talked about exception handling a
73:14
little bit ago so what I'm going to do
73:15
here is I'm going to say if name matches
73:18
any character inside of name matches for
73:22
the regular expression that we have up
73:24
here which means any of the characters
73:25
are numbers in that situation what I
73:29
want to do is I want to throw an error
73:31
so I'm going to say animal name can't
73:34
contain numbers all right
73:38
so that's going to be the message that
73:40
I'm going to shoot out let's go and do
73:42
them for other ones too so let's say
73:44
something like require and here I'm
73:47
going to say if height is greater than 0
73:50
what I'm doing is saying that height
73:52
must be greater than 0 and if it is not
73:55
the message I'm going to say is height
73:57
must be greater than 0 ok and let's do
74:03
the same thing and other requirements of
74:05
my class is that the weight of my
74:09
animals must also be greater than 0
74:12
otherwise I will not accept them as
74:14
valid animals and then inside of here
74:17
outside of an it of course I'm also
74:19
going to throw in a method and if you
74:22
want your assets your methods to be over
74:25
or provide for the option that your
74:27
message could be overridden you need to
74:30
put open here once again I'm going to
74:32
say fun and this is going to be called
74:34
get info and it's going to
74:36
output some information but it's not
74:37
going to return any information and what
74:40
it specifically is going to output let's
74:43
get this out of here is look and have
74:47
that there so we're going to say print
74:49
line and I'm going to get to the name
74:52
how you get the name value as you just
74:53
go dollar sign name is and here I'll
74:56
just say height and tall and weighs I'm
75:01
not going to get into specifics of what
75:03
type of that is we're using and there
75:05
you go so that's how you define the
75:07
attributes this is how you define what
75:10
is valid values for all of the different
75:12
attributes and this is how you define a
75:15
method for your class now what I want to
75:17
do is come up here after I have that set
75:19
up to come up inside of main and go and
75:22
create an animal object how you create
75:24
one is you go Bowser
75:27
like this is equal to and you do not
75:29
type new inside here you just type in
75:31
whatever it's called and then you want
75:33
to say Bowser or whatever the name is
75:35
and let's say I want a 20 point zero and
75:39
thirteen point five is valid and then I
75:43
can call for our function to execute I
75:46
go and get info exactly like that and
75:49
then we can run it as long as I'm having
75:51
errors yes Bowser is 20.0 tall and
75:55
weighs thirteen point five brief
75:56
explanation of how those all Walter
75:58
eight and now I'm going to talk about
76:00
inheritance okay so what we're going to
76:03
do is I'm going to create a new class
76:06
and I cut dog and it is going to inherit
76:10
since I don't have open on here you're
76:12
not going to be able to inherit from dog
76:13
I've decided so it's also going to
76:16
receive a name which is going to be a
76:17
string and it's also going to have a
76:21
height which is going to be a double and
76:24
it's going to have a weight which is
76:26
also going to be a double and it's also
76:29
going to have this time I have to put a
76:31
var it's going to have an owner whoops
76:34
owner like that and that's going to be a
76:37
string now to say that I want to inherit
76:40
from animal I just put a colon an animal
76:43
and then I let the name the height and
76:47
the weight the
76:49
initialized over inside of animal and
76:52
then it comes down like this and let's
76:54
say that I would like to override get
76:57
information I just go override fun get
77:01
info and of course I can put my own
77:04
methods inside of here do whatever I
77:05
want
77:06
this is not going to return anything and
77:09
let's just go and copy what this says so
77:11
it's just coffee that's change it up
77:14
slightly so name is height tall bla bla
77:17
bla bla bla and is owned by and owner
77:23
okay so there we go we just created a
77:26
dog which inherits a from animal and
77:28
it's come up here and test it to make
77:30
sure that it operates the way that we
77:33
feel that it should so I'm going to go
77:35
WOW spot is equal to and here I'm going
77:39
to call dog and spots and probably more
77:43
fizzles going to work in Kotlin just
77:45
like you would expect it to so it's like
77:48
this so I'm leave that for homework for
77:50
you to test out 14.5 and I'm Paul Smith
77:55
is the owner
77:57
I'm going to go spots and get info is
78:01
going to print that out and we're going
78:02
to run it and it should have worked
78:04
yeah spot is 20 inches tall weighs 14.5
78:07
and is owned by Paul smih okay so that's
78:09
how inheritance works inside of God well
78:11
now why don't I give a brief explanation
78:13
of how interfaces work all right so come
78:15
back down here inside here and what I'm
78:18
going to do is I am going to create an
78:21
interface so this is going to be an
78:23
interface that is going to provide for
78:26
the option to make something flyable and
78:30
an interface of course is just a
78:32
contract that states that all fields and
78:34
methods a class must implement if it
78:37
implements the interface so I'm going to
78:39
call this interface fly a bowl and I'm
78:43
going to say that anybody that is
78:45
basically wants to use the interface is
78:48
going to have to have a field inside of
78:51
it called flies and it is going to be a
78:54
boolean and it also is going to have a
78:58
fly method
79:00
Stud of its that is going to receive a
79:04
distance miles flown or whatever and
79:08
it's going to receive a double and it is
79:11
going to not do anything not return
79:14
anything all right and let's change and
79:16
let's look at that exactly the way we
79:18
have right there after this you know
79:20
what I'm going to create a bird class
79:23
that's going to implement that so I'm
79:25
going to go bird and you're going to be
79:27
able to call your constructor directly
79:30
from inside of here and do some like Val
79:32
and name and this is going to be a
79:36
string and I'm going to say right here
79:41
whoops the override VAR flies and to
79:46
implement the interface here what we're
79:47
going to do is follow the constructor
79:50
parameters with a colon and the
79:53
interface name oops let's also come in
79:56
here and make sure pull in and let's
79:58
give it a default value of true and then
80:01
I'm going to come in and go fly of all
80:03
fly oops
80:05
fly a hole it's getting late into this
80:07
tutorial
80:08
nothing up a little bit okay so there's
80:10
flyable and let's go and put this down
80:12
here so we can see more of this stuff
80:14
all at one time so there you can see it
80:17
all right so there's flyable and inside
80:21
of it we of course need to override the
80:25
function fly
80:27
so there's fly and this is going to be
80:30
distance miles and a double and of
80:34
course it's not going to return anything
80:36
and it's just down here because that's
80:40
confusing me pet hair and then what I'm
80:42
going to do is I'm going to say if flies
80:45
in that situation I want to print out
80:50
that whatever the name of our bird is is
80:54
going to fly a certain number of
80:58
distance miles and then I'll say miles
81:02
after that and there that is and did I
81:04
do this right I think it did there's
81:06
liable there's that there's this
81:08
everything looks good and then we'll
81:10
come up inside of here and test out our
81:13
interface
81:14
so there's all this stuff that we are
81:16
we're in the main function and I'm going
81:18
to create a bird let's call it Tweety so
81:22
is equal to bird and the name is Tweety
81:26
and it is going to be true that Tweety
81:30
is a flying bird and then we can say
81:33
tweet and call for the fly function to
81:37
work and we'll say that Tweety flew 10
81:40
miles let's run that and see if I have
81:43
any errors
81:43
oops have an error what do we got
81:45
unresolved reference tweet distance
81:49
miles
81:49
ok so 17 Oh Tweety spell that let's run
81:54
it again just see that to the anyway
81:57
another air 62 unresolved reference
82:00
distance miles distance miles just just
82:03
miles all this miles let's change this
82:06
the distance miles right there the
82:09
distance miles right there Oh so should
82:13
be okay I'm just going to run it and do
82:15
and you can see Tweety flies 10 miles ok
82:18
so there you go there's interfaces and a
82:20
whole bunch of other different things
82:22
and to finish off everything I'm going
82:24
to talk about null safety
82:26
okay so null safety is built directly
82:29
into Kotlin because there's it's null
82:32
causes lots of issues so causing that's
82:34
one thing that cousin tries to do is is
82:36
to solve potential issues now to by
82:39
default you actually cannot assign null
82:42
and I'm going to show you this I'm going
82:44
to null value like this and string is
82:49
equal to null ok you're going to see
82:52
that it gives me an error and what it
82:54
says is null cannot be a value of a non
82:56
null type string ok so you can't do that
83:00
however you can allow for a null value
83:04
to be assigned and how you do that is
83:07
you just put a question mark inside
83:08
there and there you can see that the
83:10
error went away now another thing is a
83:13
function may return null and in the
83:17
situation which that occurs you're also
83:18
going to be used our little question
83:20
mark so let's go fun and my fun for
83:24
function and
83:26
ring so if there's a chance that this
83:29
could return a null value you are going
83:32
to put the little question mark there
83:34
let's go and actually do a real-world
83:37
example here instead of just doing
83:39
something a little bit weird so we're
83:40
going to have fun and this guy is
83:42
actually going to return all the time so
83:44
we're going to go turn null and we will
83:47
put string inside of here like this and
83:50
create a function and the whole purpose
83:52
of this function is to return null -
83:55
cause you know issues and so forth you
83:57
can see right there I did it and it did
84:00
not give me any errors another thing
84:03
that is neat is that Kotlin is going to
84:05
provide for the opportunity of a null
84:07
value if an if statement is going to
84:10
protect it from danger so what we're
84:13
going to do here is I'm going to go var
84:15
and know Val 2 is equal to return null
84:21
so we're going to call that function
84:23
that sole purpose is to return the null
84:26
value and then what I'm going to do down
84:28
here is I'm going to use what Kotlin
84:31
refers to as a smart cast so I'm going
84:33
to say if no Val 2 is not equal to null
84:38
in that situation I am going to go in
84:42
here and try to print it out or print
84:45
out length of that so I'm going to say
84:47
no Val - dot link and there that is now
84:52
if I didn't have this here this would be
84:54
throwing an error but since I do have
84:56
that if statements there like I said
84:57
it's called a smart cast and Kotlin
84:59
smart enough to allow me to do that
85:01
since I caught the null issue myself you
85:04
could also use the Force operator to
85:07
force an all assignment so in this way
85:10
we go in all Val 3 is equal to null Val
85:15
- and then you put - that's the force
85:19
operator - exclamation marks and lengths
85:22
like that and it's going to provide for
85:25
the option and then the final thing is
85:28
you can use the Elvis operator to assign
85:32
a default value if the value could be
85:35
not so and how that would work is you
85:37
would go for
85:39
all for this is a string and in this
85:44
situation we're going to call the old
85:45
return null which only exists to return
85:48
null and there is the Elvis operator
85:51
it's going to be a question mark
85:52
followed by a colon and there will say
85:55
if you try to assign a value of null
85:58
tune all Val for instead install or
86:02
assign the value of no name okay so
86:05
there you go guys
86:06
did my best to cover the vast majority
86:09
of what you're going to need to get
86:10
going in regards to working with a
86:12
absolutely super awesome language Kotlin
86:15
and if you guys have any questions or
86:18
comments please leave them down below
86:20
otherwise till next time